import random

# shows the user the number representaion for each tile
def exampleBoard():
    example = [[-1 for col in range(3)] for row in range(3)]
    i = 0
    for row in range(0,3):
        for col in range(0,3):
            example[row][col] = i
            i += 1
    for row in range(0,3):
        for col in range(0,3):
            print("|   {0}   |".format(example[row][col]), end="")
        print("")

    print()
# prints the state of the board out with only O's and X's
def printBoard(board):
    for row in range(0,3):
        for col in range(0,3):
            if (board[row][col] == -1):
                print("|       |", end = "")
            elif(board[row][col] == 0):
                print("|   O   |", end = "")
            else:
                print("|   X   |", end = "")
        print("")

# checks to see whether a solution has been found for either the user or computer
def checkSolution(board, node):
    for index in range(0,3):
        #checks each row
        if (board[index][0]) == (board[index][1]) == (board[index][2]) == node:
            return True
        #checks each column
        if (board[0][index]) == (board[1][index]) == (board[2][index]) == node:
            return True
    # check the left-to-right diagonal
    if (board[0][0]) == (board[1][1]) ==  (board[2][2]) == node:
        return True
    # check the right-to-left diagonal
    if (board[0][2]) == (board[1][1]) == (board[2][0]) == node:
        return True
    return False

# checks to see if there are no more available tiles on the board
def checkIfComplete(board):
    flag = False
    for row in range(0, 3):
        for col in range(0, 3):
            if board[row][col] == -1:
                flag = True
    return flag

# minimax algorithm where computer is maximizer, helps the computer make the best decision always
def minimax(board, depth, isMax):
    # check if player has a solution state
    if checkSolution(board, 0):
        value = -100 + depth
        return value
    if checkSolution(board, 1):
        value = 100 - depth
        return value
    # if the board has no more empty tiles
    else:
        flag = checkIfComplete(board)
        if(flag == False):
            value = 0
            return value

    if isMax:
        value = -1000
        # look through every empty tile
        for row in range(0,3):
            for col in range(0,3):
                # -1 is the sentinel value
                if board[row][col] == -1:
                    newAction = [row, col]
                    board[row][col] = 1
                    newValue = minimax(board, depth + 1, False)
                    if (value < newValue):
                        action = newAction
                        value = newValue
                    # restore condition of board
                    board[row][col] = -1
        # only care about the immediate action computer will make
        if (depth == 0):
            return action
        return value

    else:
        value = 1000
        for row in range(0, 3):
            for col in range(0, 3):
                if board[row][col] == -1:
                    newAction = [row, col]
                    board[row][col] = 0
                    newValue = minimax(board, depth + 1, True)
                    if value > newValue:
                        action = newAction
                        value = newValue
                    board[row][col] = -1
        if (depth == 0):
            return action
        return value

# facilitates the tic-tac-toe match
def playGame(board):
    while(True):
        action = minimax(board, 0, True)
        board[action[0]][action[1]] = 1
        print("The computer plays the following move: \n")
        printBoard(board)
        if checkSolution(board, 1):
            print("\nThe computer has won!")
            return 0

        flag = checkIfComplete(board)
        if (flag == False):
            print("\nDraw.")
            return 0

        # legitEntry ensures the player does not place an O in an already filled tile
        legitEntry = False
        while(legitEntry is False):
            choice = int(input("\nYour turn. Where will you place your circle? "))
            print()
            if choice < 3:
                if (board[0][choice] != -1):
                    print("That square has already been filled in. Pick another.")
                    continue
                legitEntry = True
                board[0][choice] = 0
            elif choice > 5:
                if (board[2][choice % 3] != -1):
                    print("That square has already been filled in. Pick another.")
                    continue
                board[2][choice % 3] = 0
                legitEntry = True
            else:
                if (board[1][choice % 3] != -1):
                    print("That square has already been filled in. Pick another.")
                    continue
                board[1][choice % 3] = 0
                legitEntry = True

        printBoard(board)

        if checkSolution(board, 0):
            print("\nYou have won!")
            return 0
        flag = checkIfComplete(board)
        if (flag == False):
            print("\nDraw.")
            return 0

# chooses who will go first randomly
coin = random.choice(range(0,2))
first = True

if coin == 1:
    first = False

if first is False:
    print("Sorry, you will go second.")
else:
    print("You will go first.\n")

print("\nUse the following as an example of what number represents what square. \n")
exampleBoard()

# creates the board with -1 to represent empty tiles
board = [[-1 for col in range(3)] for row in range(3)]

# if the player is going first
if first is True:
    choice = int(input("Which square do you want to place your first mark in?(Enter a number 0-8) "))
    if choice < 3:
        board[0][choice] = 0
    elif choice > 5:
        board[2][choice % 3] = 0
    else:
        board[1][choice % 3] = 0
    print()
    printBoard(board)
    print()

playGame(board)
